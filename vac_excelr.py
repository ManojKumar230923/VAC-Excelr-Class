# -*- coding: utf-8 -*-
"""VAC_Excelr.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bnaR2rHhcfNGuPx4SyuY0xGFoiL86n6e

**DAY 1**
"""

#Addition of two numbers
10+20

"Hello"

'Hello'

print("Welcome to Excelr")

120/12*2-4

(5-2)*10

13//2

5**3

13/2

marks=80
marks

type(marks)

"""**Boolean Operations**"""

X=True
Y=False

type(Y)

X or Y

X and Y

not X

not Y

x=13
y=50
x>y

price=50.5
price
type(price)

print(price)
type(price)

name="Manoj"
type(name)

dir(str) #all the methods that are applied on strings.

"""**DAY 2**"""

name.capitalize()

name.upper()

name.lower()

name

food = "bIrYAni"
name = "sNEHAL"
print(food.swapcase())
name.swapcase()

s1="my name is manoj"
s1.split()

s2="Mumbai-Pune-Mumbai"
s2.split()

s2="Mumbai-Pune-Mumbai"
s2.split("-")

mail="manoj@excelr.com"
mail.split("@")

s1

s1.replace("manoj","Kumar")

s1

#comment
'''comment'''
"""Comment"""
'\n comment \n'

city="satara"
city.count("a")

"pune".count("p")

name="manoj"
name*2

n1=5
n1*7

name="a"
surname="A"
name+surname

name + " " +surname

a=15
b=20
if a>b:
  print("a greater")
  print("in true block")
  c=a+b
  print(c)
else:
  print("b greater")
  print("in false block")
  c=a-b
  print(c)

a=200
b=230
if(a>b):
  print("a is greater")
else:
  print(" b is greeater :",b)

salary =15000
if (salary>20000):
  tax=0.25
  print("hello from true block")
else:
  tax=0.20
  print("hello from false block")
print("bye ")
net_sal = salary- tax*salary
print("net salary",net_sal)

for i in range(0,6):
  print("hello")

for i in range(5,12,3):
  print(i)

subject ="science"
for i in subject:
  print(i)

for i in range(11):
  print(i,i**2)

name="A"
for i in range (2,7):
  print(name*i)

name = "*"
for i in range(2,7):
  print(name*i)

movie="A"
for letter in movie:
  print(letter)
print(letter.lower())
print(letter.swapcase(),end="")

for i in range(1,11):
  if i % 2 ==0:
    print("even",i,end="")
  else:
    print("odd:",i,end="")

for letter in "Data Science":
  print(letter*4 ,end =" ")

for i in range(2,20,2):
  print(i)

marks = [30,40,50,60,70]
marks

type(marks)

li=[1,2,3,4,5]
type(li)

dir(list)

"""**DAY 3**"""

marks=[40,55,70,60,80,85,78]
marks

type(marks)

len(marks)

new_marks=sorted(marks)
new_marks

name="Snehal"
sorted(name)

marks.append(35)
marks

marks.reverse()
marks

marks.sort(reverse =True)
marks #descending order of printing

marks.insert(3,89)
marks #insertion of value on define place

90 in marks #presention or not

l1=[32]
l2=[32]
l1+l2

(l1+l2)*3

marks.pop(2)
marks

marks.insert(3,89)
marks

marks.extend([23,23,23])
marks

marks.remove(23)
marks #only one 23 will be removed

marks.index(23)

len(marks)

num =-5
if num>0:
  print("less than 0")
elif num==0:
  print("zero")
else:
  print("negative")

name = (input("Enter your name:"))
name

age=int(input("enter age:"))
age

num=int(input("enter num:"))
print("you entered:",num)
if num % 7 == 0 :
  print("yoou won")
else:
  print("try again")

even=[]
odd=[]
for i in range(1,21):
  if i%2 ==0:
    even.append(i)
  else:
    odd.append(i)
print("even:",even)
print("odd:",odd)

scores=[34,55,77,95,20,68]
for scores in scores:
  if scores>= 80:
    print(scores,"A")
  elif scores>= 60:
    print(scores,"B")
  elif scores>= 40:
    print(scores,"C")
  else:
    print(scores,"Fail")

cnt=5
while cnt<10:
  print("hi")
  cnt=cnt+1

def square(x):
  return x*x

square(7)

def squareroot(x):
  return x**0.5

squareroot(9)

scores=[34,55,77,95,20,68]
def calc_grde(scores):
  if scores>= 80:
    grade="A"
  elif scores>= 60:
    grade="B"
  elif scores>= 40:
    grade="C"
  else:
    grade="Fail"

list=["A","B","C","D","E"]
list

for num in list:
  print(num.upper(),end = " ")

"""**DAY 4**"""

#List comprehension - makes your code compact
l1=[2,3,4,5,6]
l2=[]
for i in l1:
  l2.append(i**2)
print(l1)
print(l2)

l1=[2,3,4,5,6]
l2=[i**2 for i in l1]
print(l1)
print(l2)

from math import sqrt
sqrt(25)

from math import factorial
factorial(5)

import pandas as pd

data=[[1,'Neha','Mgr'],[2,'Nisha','prgmr'],[3,'saloni','clerk']]
data

df1=pd.DataFrame(data)
df1

df2=pd.DataFrame(data,columns=['Id','Name','Desig'])
df2

data={
     'eid':[100,200,300],
     'Ename' :['A','B','C'],
     'Job':['mgr','prgmr','hr']
     }
data

df4=pd.DataFrame(data)
df4

"""**DAY 5**"""

import pandas as pd
import numpy as np
data=[
    [1,2,3,'M'],
    [np.nan,5,6,np.nan],
    [7,np.nan,8,'F'],
    [np.nan,np.nan,np.nan,'F']
]

dframe=pd.DataFrame(data,columns=['A','B','C','D'])
dframe

dframe['A']

dframe.fillna(0)

avg_a=dframe['A'].mean()
avg_a

avg_b=round(dframe['B'].mean())
avg_b
avg_a=round(dframe['A'].mean())
avg_a
avg_c=round(dframe['C'].mean())
avg_c

dframe.shape[1]

dframe['D'].mode()

d_mode=dframe['D'].mode()[0]
d_mode

dframe.fillna({'D':d_mode})

dframe.fillna({'A':avg_a},inplace=True)
dframe

dframe.fillna({'B':avg_b,'C':avg_c},inplace=True)
dframe

dframe.fillna({'D':d_mode},inplace=True)
dframe

df1=pd.DataFrame({'A':[1,2,3,4],'B':[5,6,7,8]})
df1

df2=pd.DataFrame({'A':[3,4],'B':[7,8]})
df2

fn=lambda x:'Very Experienced' if x>20 else 'Less Experienced'

fn(30)

fn(10)

import calendar

"""DAY 6"""

#scatterplot
import matplotlib.pyplot as plt
ages=[30,38,45,29,50,47]
salary=[30000,38000,40000,29000,60000,50000]
plt.xlabel('ages')
plt.ylabel('salary')
plt.scatter(ages,salary,color="green")
plt.title("Scatter Plot")
plt.show()

x=[-5,-2,-1,2,4,6,7,10]
y=[35,34,60,50,20,70,90,80]
plt.figure(figsize=(6,4))
plt.suptitle("learning visualization")
plt.xlim(-6,11)
plt.ylim(10,100)
plt.plot(x,y)

from math import exp
x=list(range(0,30))
y=[exp(i) for i in x]
plt.plot(x,y)

"""**DAY 7**"""

# Commented out IPython magic to ensure Python compatibility.
#Exploratory Data Analysis
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
plt.rcParams['figure.figsize']=(10,5)
# %matplotlib inline
import warnings
warnings.filterwarnings('ignore')

df=pd.read_csv(r'/content/Bank Analytics cleaned .csv',encoding='latin1')
df

df.describe(include=object)
#to find unique values,most erpeated values,frequency and count

df.info()

df['Age '].unique()

df['Age '].value_counts()

df[df.duplicated()]

df[df.duplicated(keep=False)]

df.isna().sum()

df.isnull().sum()

sns.heatmap(df.isna())

len(df)

for i in df.isna().sum():
  print(i/len(df)*100)

df.hist()
plt.tight_layout()

df.boxplot()

sns.boxplot(df['Age '])

df['Age '].value_counts()
df

df['Age '].mode()

df['Age '].mode()[0]

df.isna().sum()

#outlier Detection
df.describe()

#outlier Treatment
def userfunction():
  print("hi")

userfunction()

len(df)

def add(num1,num2):
  print(num1+num2)

add(1,2)

def outlier_detection(data,colname):
  q1=data[colname].quantile(0.25)
  q3=data[colname].quantile(0.75)
  iqr=q3-q1

  upper_extereme=q3+(1.5*iqr)
  lower_extreame=q1-(1.5*iqr)
  return upper_extereme,lower_extreame,q1,q3

outlier_detection(df,'BH No')

df[df['BH No']>10500]

df[df['BH No']>10500].shape[0]

df.corr(numeric_only=True)

sns.heatmap(df.corr(numeric_only=True),annot=True,cmap='viridis')

"""**DAY 8**"""

#Random variability & Probability

